/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'AlertMsg'
 * message type.
 */

public class AlertMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 6;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 22;

    /** Create a new AlertMsg of size 4. */
    public AlertMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new AlertMsg of the given data_length. */
    public AlertMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AlertMsg with the given data_length
     * and base offset.
     */
    public AlertMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AlertMsg using the given byte array
     * as backing store.
     */
    public AlertMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AlertMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public AlertMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AlertMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public AlertMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AlertMsg embedded in the given message
     * at the given base offset.
     */
    public AlertMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AlertMsg embedded in the given message
     * at the given base offset and length.
     */
    public AlertMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <AlertMsg> \n";
      try {
        s += "  [stolenId=0x"+Long.toHexString(get_stolenId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [voltageData=0x"+Long.toHexString(get_voltageData())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [eventId=0x"+Long.toHexString(get_eventId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [parentId=0x"+Long.toHexString(get_parentId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [linkQuality=0x"+Long.toHexString(get_linkQuality())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [linkQuality=0x"+Long.toHexString(get_neighbors())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: stolenId
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'stolenId' is signed (false).
     */
    public static boolean isSigned_stolenId() {
        return false;
    }

    /**
     * Return whether the field 'stolenId' is an array (false).
     */
    public static boolean isArray_stolenId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'stolenId'
     */
    public static int offset_stolenId() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'stolenId'
     */
    public static int offsetBits_stolenId() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'stolenId'
     */
    public int get_stolenId() {
        return (int)getUIntBEElement(offsetBits_stolenId(), 16);
    }

    /**
     * Set the value of the field 'stolenId'
     */
    public void set_stolenId(int value) {
        setUIntBEElement(offsetBits_stolenId(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'stolenId'
     */
    public static int size_stolenId() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'stolenId'
     */
    public static int sizeBits_stolenId() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: voltageData
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    public static boolean isSigned_voltageData() {
        return false;
    }
    public static boolean isArray_voltageData() {
        return false;
    }
    public static int offset_voltageData() {
        return (16 / 8);
    }
    public static int offsetBits_voltageData() {
        return 16;
    }
    public int get_voltageData() {
        return (int)getUIntBEElement(offsetBits_voltageData(), 16);
    }
    public void set_voltageData(int value) {
        setUIntBEElement(offsetBits_voltageData(), 16, value);
    }
    public static int size_voltageData() {
        return (16 / 8);
    }
    public static int sizeBits_voltageData() {
        return 16;
    }

/*
 * Event ID
 */

public static boolean isSigned_eventId() {
        return false;
    }
    public static boolean isArray_eventId() {
        return false;
    }
    public static int offset_eventId() {
        return (32 / 8);
    }
    public static int offsetBits_eventId() {
        return 32;
    }
    public int get_eventId() {
        return (int)getUIntBEElement(offsetBits_eventId(), 16);
    }
    public void set_eventId(int value) {
        setUIntBEElement(offsetBits_eventId(), 16, value);
    }
    public static int size_eventId() {
        return (16 / 8);
    }
    public static int sizeBits_eventId() {
        return 16;
    }

/* 
 * Parent ID
 */

public static boolean isSigned_parentId() {
        return false;
    }
    public static boolean isArray_parentId() {
        return false;
    }
    public static int offset_parentId() {
        return (48 / 8);
    }
    public static int offsetBits_parentId() {
        return 48;
    }
    public int get_parentId() {
        return (int)getUIntBEElement(offsetBits_parentId(), 16);
    }
    public void set_parentId(int value) {
        setUIntBEElement(offsetBits_parentId(), 16, value);
    }
    public static int size_parentId() {
        return (16 / 8);
    }
    public static int sizeBits_parentId() {
        return 16;
    }


/* 
 * Link Quality
 */

public static boolean isSigned_linkQuality() {
        return false;
    }
    public static boolean isArray_linkQuality() {
        return false;
    }
    public static int offset_linkQuality() {
        return (64 / 8);
    }
    public static int offsetBits_linkQuality() {
        return 64;
    }
    public int get_linkQuality() {
        return (int)getUIntBEElement(offsetBits_linkQuality(), 16);
    }
    public void set_linkQuality(int value) {
        setUIntBEElement(offsetBits_linkQuality(), 16, value);
    }
    public static int size_linkQuality() {
        return (16 / 8);
    }
    public static int sizeBits_linkQuality() {
        return 16;
    }

/* 
 * Number of neighbors
 */

public static boolean isSigned_neighbors() {
        return false;
    }
    public static boolean isArray_neighbors() {
        return false;
    }
    public static int offset_neighbors() {
        return (80 / 8);
    }
    public static int offsetBits_neighbors() {
        return 80;
    }
    public int get_neighbors() {
        return (int)getUIntBEElement(offsetBits_neighbors(), 8);
    }
    public void set_neighborsd(int value) {
        setUIntBEElement(offsetBits_neighbors(), 8, value);
    }
    public static int size_neighbors() {
        return (8 / 8);
    }
    public static int sizeBits_neighbors() {
        return 8;
    }

}
