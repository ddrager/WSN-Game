/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'AlertMsg'
 * message type.
 */

public class AlertMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 23;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 22;

    /** Create a new AlertMsg of size 23. */
    public AlertMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new AlertMsg of the given data_length. */
    public AlertMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AlertMsg with the given data_length
     * and base offset.
     */
    public AlertMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AlertMsg using the given byte array
     * as backing store.
     */
    public AlertMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AlertMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public AlertMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AlertMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public AlertMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AlertMsg embedded in the given message
     * at the given base offset.
     */
    public AlertMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AlertMsg embedded in the given message
     * at the given base offset and length.
     */
    public AlertMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <AlertMsg> \n";
      try {
        s += "  [stolenId=0x"+Long.toHexString(get_stolenId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [voltageData=0x"+Long.toHexString(get_voltageData())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [eventId=0x"+Long.toHexString(get_eventId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [parentId=0x"+Long.toHexString(get_parentId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [linkQuality=0x"+Long.toHexString(get_linkQuality())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [neighbors=0x"+Long.toHexString(get_neighbors())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [path1=0x"+Long.toHexString(get_path1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [path2=0x"+Long.toHexString(get_path2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [path3=0x"+Long.toHexString(get_path3())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [path4=0x"+Long.toHexString(get_path4())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [path5=0x"+Long.toHexString(get_path5())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [path6=0x"+Long.toHexString(get_path6())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: stolenId
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'stolenId' is signed (false).
     */
    public static boolean isSigned_stolenId() {
        return false;
    }

    /**
     * Return whether the field 'stolenId' is an array (false).
     */
    public static boolean isArray_stolenId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'stolenId'
     */
    public static int offset_stolenId() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'stolenId'
     */
    public static int offsetBits_stolenId() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'stolenId'
     */
    public int get_stolenId() {
        return (int)getUIntBEElement(offsetBits_stolenId(), 16);
    }

    /**
     * Set the value of the field 'stolenId'
     */
    public void set_stolenId(int value) {
        setUIntBEElement(offsetBits_stolenId(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'stolenId'
     */
    public static int size_stolenId() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'stolenId'
     */
    public static int sizeBits_stolenId() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: voltageData
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'voltageData' is signed (false).
     */
    public static boolean isSigned_voltageData() {
        return false;
    }

    /**
     * Return whether the field 'voltageData' is an array (false).
     */
    public static boolean isArray_voltageData() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'voltageData'
     */
    public static int offset_voltageData() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'voltageData'
     */
    public static int offsetBits_voltageData() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'voltageData'
     */
    public int get_voltageData() {
        return (int)getUIntBEElement(offsetBits_voltageData(), 16);
    }

    /**
     * Set the value of the field 'voltageData'
     */
    public void set_voltageData(int value) {
        setUIntBEElement(offsetBits_voltageData(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'voltageData'
     */
    public static int size_voltageData() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'voltageData'
     */
    public static int sizeBits_voltageData() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: eventId
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'eventId' is signed (false).
     */
    public static boolean isSigned_eventId() {
        return false;
    }

    /**
     * Return whether the field 'eventId' is an array (false).
     */
    public static boolean isArray_eventId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'eventId'
     */
    public static int offset_eventId() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'eventId'
     */
    public static int offsetBits_eventId() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'eventId'
     */
    public int get_eventId() {
        return (int)getUIntBEElement(offsetBits_eventId(), 16);
    }

    /**
     * Set the value of the field 'eventId'
     */
    public void set_eventId(int value) {
        setUIntBEElement(offsetBits_eventId(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'eventId'
     */
    public static int size_eventId() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'eventId'
     */
    public static int sizeBits_eventId() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: parentId
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'parentId' is signed (false).
     */
    public static boolean isSigned_parentId() {
        return false;
    }

    /**
     * Return whether the field 'parentId' is an array (false).
     */
    public static boolean isArray_parentId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'parentId'
     */
    public static int offset_parentId() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'parentId'
     */
    public static int offsetBits_parentId() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'parentId'
     */
    public int get_parentId() {
        return (int)getUIntBEElement(offsetBits_parentId(), 16);
    }

    /**
     * Set the value of the field 'parentId'
     */
    public void set_parentId(int value) {
        setUIntBEElement(offsetBits_parentId(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'parentId'
     */
    public static int size_parentId() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'parentId'
     */
    public static int sizeBits_parentId() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: linkQuality
    //   Field type: int, unsigned
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'linkQuality' is signed (false).
     */
    public static boolean isSigned_linkQuality() {
        return false;
    }

    /**
     * Return whether the field 'linkQuality' is an array (false).
     */
    public static boolean isArray_linkQuality() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'linkQuality'
     */
    public static int offset_linkQuality() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'linkQuality'
     */
    public static int offsetBits_linkQuality() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'linkQuality'
     */
    public int get_linkQuality() {
        return (int)getUIntBEElement(offsetBits_linkQuality(), 16);
    }

    /**
     * Set the value of the field 'linkQuality'
     */
    public void set_linkQuality(int value) {
        setUIntBEElement(offsetBits_linkQuality(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'linkQuality'
     */
    public static int size_linkQuality() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'linkQuality'
     */
    public static int sizeBits_linkQuality() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: neighbors
    //   Field type: short, unsigned
    //   Offset (bits): 80
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'neighbors' is signed (false).
     */
    public static boolean isSigned_neighbors() {
        return false;
    }

    /**
     * Return whether the field 'neighbors' is an array (false).
     */
    public static boolean isArray_neighbors() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'neighbors'
     */
    public static int offset_neighbors() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'neighbors'
     */
    public static int offsetBits_neighbors() {
        return 80;
    }

    /**
     * Return the value (as a short) of the field 'neighbors'
     */
    public short get_neighbors() {
        return (short)getUIntBEElement(offsetBits_neighbors(), 8);
    }

    /**
     * Set the value of the field 'neighbors'
     */
    public void set_neighbors(short value) {
        setUIntBEElement(offsetBits_neighbors(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'neighbors'
     */
    public static int size_neighbors() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'neighbors'
     */
    public static int sizeBits_neighbors() {
        return 8;
    }


    /////////////////////////////////////////////////////////
    // Accessor methods for field: path1
    //   Field type: int, unsigned
    //   Offset (bits): 88
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    public static boolean isSigned_path1() { return false; }
    public static boolean isArray_path1() { return false; }
    public static int offset_path1() { return (88 / 8); }
    public static int offsetBits_path1() { return 88; }
    public int get_path1() { return (int)getUIntBEElement(offsetBits_path1(), 16); }
    public void set_path1(int value) { setUIntBEElement(offsetBits_path1(), 16, value); }
    public static int size_path1() { return (16 / 8); }
    public static int sizeBits_path1() { return 16; }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: path2
    //   Field type: int, unsigned
    //   Offset (bits): 104
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    public static boolean isSigned_path2() { return false; }
    public static boolean isArray_path2() { return false; }
    public static int offset_path2() { return (104 / 8); }
    public static int offsetBits_path2() { return 104; }
    public int get_path2() { return (int)getUIntBEElement(offsetBits_path2(), 16); }
    public void set_path2(int value) { setUIntBEElement(offsetBits_path2(), 16, value); }
    public static int size_path2() { return (16 / 8); }
    public static int sizeBits_path2() { return 16; }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: path3
    //   Field type: int, unsigned
    //   Offset (bits): 120
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    public static boolean isSigned_path3() { return false; }
    public static boolean isArray_path3() { return false; }
    public static int offset_path3() { return (120 / 8); }
    public static int offsetBits_path3() { return 120; }
    public int get_path3() { return (int)getUIntBEElement(offsetBits_path3(), 16); }
    public void set_path3(int value) { setUIntBEElement(offsetBits_path3(), 16, value); }
    public static int size_path3() { return (16 / 8); }
    public static int sizeBits_path3() { return 16; }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: path4
    //   Field type: int, unsigned
    //   Offset (bits): 136
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    public static boolean isSigned_path4() { return false; }
    public static boolean isArray_path4() { return false; }
    public static int offset_path4() { return (136 / 8); }
    public static int offsetBits_path4() { return 136; }
    public int get_path4() { return (int)getUIntBEElement(offsetBits_path4(), 16); }
    public void set_path4(int value) { setUIntBEElement(offsetBits_path4(), 16, value); }
    public static int size_path4() { return (16 / 8); }
    public static int sizeBits_path4() { return 16; }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: path5
    //   Field type: int, unsigned
    //   Offset (bits): 152
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    public static boolean isSigned_path5() { return false; }
    public static boolean isArray_path5() { return false; }
    public static int offset_path5() { return (152 / 8); }
    public static int offsetBits_path5() { return 152; }
    public int get_path5() { return (int)getUIntBEElement(offsetBits_path5(), 16); }
    public void set_path5(int value) { setUIntBEElement(offsetBits_path5(), 16, value); }
    public static int size_path5() { return (16 / 8); }
    public static int sizeBits_path5() { return 16; }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: path1
    //   Field type: int, unsigned
    //   Offset (bits): 168
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    public static boolean isSigned_path6() { return false; }
    public static boolean isArray_path6() { return false; }
    public static int offset_path6() { return (168 / 8); }
    public static int offsetBits_path6() { return 168; }
    public int get_path6() { return (int)getUIntBEElement(offsetBits_path6(), 16); }
    public void set_path6(int value) { setUIntBEElement(offsetBits_path6(), 16, value); }
    public static int size_path6() { return (16 / 8); }
    public static int sizeBits_path6() { return 16; }




}
